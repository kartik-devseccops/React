name: Build, Push to GCR & Deploy to GKE

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker to use Google Cloud
        run: gcloud auth configure-docker gcr.io

      - name: Set Environment Variables
        run: |
          PROJECT_ID=$(gcloud config get-value project)
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')

          if [[ -z "$PROJECT_ID" || -z "$REPO_NAME" ]]; then
            echo "Error: PROJECT_ID or REPO_NAME is empty!" >&2
            exit 1
          fi

          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
          echo "GCR_REGISTRY=gcr.io/$PROJECT_ID" >> $GITHUB_ENV
          echo "GCR_REPOSITORY=$REPO_NAME" >> $GITHUB_ENV

      - name: Ensure GCR Repository Exists
        run: |
          if ! gcloud artifacts repositories describe $REPO_NAME --location=us-central1 >/dev/null 2>&1; then
            echo "Creating GCR repository: $REPO_NAME"
            gcloud artifacts repositories create $REPO_NAME \
              --repository-format=docker \
              --location=us-central1 \
              --description="GCR Repository for $REPO_NAME"
          else
            echo "GCR repository $REPO_NAME already exists."
          fi

      - name: Build and Push Docker Image to GCR
        run: |
          echo "Building Docker image..."
          docker build -t $GCR_REGISTRY/$GCR_REPOSITORY:latest -t $GCR_REGISTRY/$GCR_REPOSITORY:$IMAGE_TAG .

          echo "Pushing Docker image to GCR..."
          docker push $GCR_REGISTRY/$GCR_REPOSITORY:latest
          docker push $GCR_REGISTRY/$GCR_REPOSITORY:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout service-configs repository
        uses: actions/checkout@v3
        with:
          repository: '${{ secrets.SERVICE_CONFIG_REPO }}'
          token: '${{ secrets.GH_TOKEN }}'
          path: service-configs

      - name: Update Kubernetes Manifests
        run: |
          cd service-configs
          echo "Updating image in deployment.yaml..."
          yq e '.spec.template.spec.containers[0].image = env(GCR_REGISTRY) + "/" + env(GCR_REPOSITORY) + ":" + env(IMAGE_TAG)' -i deployment.yaml
          cat deployment.yaml

      - name: Commit and Push Changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Updated image tag to ${{ github.sha }}"
          branch: main
          repository: ./service-configs

      - name: Trigger ArgoCD Sync
        run: |
          curl -X POST -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
               https://argocd-server/api/v1/applications/my-app/sync
