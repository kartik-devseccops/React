# function generateCIgithubFilesContent(
#   env,
#   organisation,
#   branch_name,
#   project_id,
#   region,
#   repo_name,
#   ServiceConfigRepo,
#   ServiceConfigBranch,
#   BuildTool,
#   JavaVersion,
#   GradleVersion
# ) {
#   const gradlebuild =
#     BuildTool == "gradle"
#       ? `
#       - uses: actions/setup-java@v4
#         with:
#           java-version: "${JavaVersion}"
#           distribution: "temurin"

#       - name: Setup Gradle
#         uses: gradle/actions/setup-gradle@v4
#         with:
#           gradle-version: "${GradleVersion}"
#           `
#       : "";

#   const cicdTemplate = `name: Build and deploy in ${env} GKE

# on:
#   push:
#     branches: [ ${branch_name} ]
  
# permissions:
#   id-token: write
#   contents: read

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Authenticate with Google Cloud
#         uses: google-github-actions/auth@v1
#         with:
#           credentials_json: \${{ secrets.GCP_SA_KEY }}

#       - name: Set up Cloud SDK
#         uses: google-github-actions/setup-gcloud@v1

#       - name: Configure Docker for Google Artifact Registry
#         run: gcloud auth configure-docker ${region}-docker.pkg.dev
      
#       - name: Build, tag, and push image to Artifact Registry
#         id: build-image
#         env:
#           IMAGE_TAG: \${{ github.ref_name }}
#           IMAGE_VERSION: \${{ github.run_number }}
#         run: | ${
#           BuildTool == "gradle"
#             ? `
#           gradle build`
#             : ""
#         }
#           docker build -t ${region}-docker.pkg.dev/${project_id}/${repo_name}/${repo_name}:$IMAGE_TAG-$IMAGE_VERSION .
#           docker push ${region}-docker.pkg.dev/${project_id}/${repo_name}/${repo_name}:$IMAGE_TAG-$IMAGE_VERSION

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Authenticate with Google Cloud
#         uses: google-github-actions/auth@v1
#         with:
#           credentials_json: \${{ secrets.GCP_SA_KEY }}
      
#       - name: Set up Cloud SDK
#         uses: google-github-actions/setup-gcloud@v1
      
#       - name: Deploy to GKE
#         env:
#           IMAGE_TAG: \${{ github.ref_name }}
#           IMAGE_VERSION: \${{ github.run_number }}
#         run: |
#           gcloud container clusters get-credentials ${env}-${organisation}-gke-cluster --region=${region} --project=${project_id}
#           kubectl set image deployment/${repo_name} ${repo_name}=${region}-docker.pkg.dev/${project_id}/${repo_name}/${repo_name}:$IMAGE_TAG-$IMAGE_VERSION`;

#   const startupTemplate = `#!/bin/bash

# echo "Generating .env with param ${env} for service ${repo_name}"

# gcloud secrets versions access latest --secret=${repo_name}-config --project=${project_id} > .env
# ls -lart
# python manage.py runserver 0.0.0.0:3000`;

#   const dockerFileTemplate = `FROM python:3.9

# ENV DockerHOME=/home/app

# RUN mkdir -p $DockerHOME
# WORKDIR $DockerHOME

# ENV PYTHONDONTWRITEBYTECODE 1
# ENV PYTHONUNBUFFERED 1

# RUN pip3 install --upgrade pip
# COPY . $DockerHOME
# RUN pip3 install -r requirements.txt

# EXPOSE 3000
# WORKDIR $DockerHOME/devopsui/devops_ui
# ENTRYPOINT ["/bin/bash", "../../startup.sh"]`;

#   return { cicdTemplate, startupTemplate, dockerFileTemplate };
# }

# module.exports = generateCIgithubFilesContent;
curl -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST" \"https://token.actions.githubusercontent.com/.well-known/openid-configuration"
